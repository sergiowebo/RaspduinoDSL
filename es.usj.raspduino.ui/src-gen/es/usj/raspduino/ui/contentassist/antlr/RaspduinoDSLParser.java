/*
* generated by Xtext
*/
package es.usj.raspduino.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import es.usj.raspduino.services.RaspduinoDSLGrammarAccess;

public class RaspduinoDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private RaspduinoDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected es.usj.raspduino.ui.contentassist.antlr.internal.InternalRaspduinoDSLParser createParser() {
		es.usj.raspduino.ui.contentassist.antlr.internal.InternalRaspduinoDSLParser result = new es.usj.raspduino.ui.contentassist.antlr.internal.InternalRaspduinoDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getHardwareAlternatives_3_0(), "rule__Model__HardwareAlternatives_3_0");
					put(grammarAccess.getModelAccess().getPriorityAlternatives_9_1_0(), "rule__Model__PriorityAlternatives_9_1_0");
					put(grammarAccess.getAbstractDeviceAccess().getAlternatives(), "rule__AbstractDevice__Alternatives");
					put(grammarAccess.getChangeActuatorAccess().getActuatorStateAlternatives_2_0(), "rule__ChangeActuator__ActuatorStateAlternatives_2_0");
					put(grammarAccess.getPreconditionAccess().getAlternatives(), "rule__Precondition__Alternatives");
					put(grammarAccess.getPreconditionAccess().getOpAlternatives_0_1_0(), "rule__Precondition__OpAlternatives_0_1_0");
					put(grammarAccess.getPrecondition1Access().getAlternatives(), "rule__Precondition1__Alternatives");
					put(grammarAccess.getSensorValuePreconditionAccess().getCondAlternatives_1_0(), "rule__SensorValuePrecondition__CondAlternatives_1_0");
					put(grammarAccess.getPossibleValuesAccess().getAlternatives(), "rule__PossibleValues__Alternatives");
					put(grammarAccess.getTimerAccess().getRepeattypeAlternatives_3_0(), "rule__Timer__RepeattypeAlternatives_3_0");
					put(grammarAccess.getAlarmAccess().getRepeattypeAlternatives_3_0(), "rule__Alarm__RepeattypeAlternatives_3_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_9(), "rule__Model__Group_9__0");
					put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
					put(grammarAccess.getActuatorAccess().getGroup(), "rule__Actuator__Group__0");
					put(grammarAccess.getEventHandlerAccess().getGroup(), "rule__EventHandler__Group__0");
					put(grammarAccess.getChangeActuatorAccess().getGroup(), "rule__ChangeActuator__Group__0");
					put(grammarAccess.getSensorListenerAccess().getGroup(), "rule__SensorListener__Group__0");
					put(grammarAccess.getSensorListenerAccess().getGroup_3(), "rule__SensorListener__Group_3__0");
					put(grammarAccess.getPreconditionAccess().getGroup_0(), "rule__Precondition__Group_0__0");
					put(grammarAccess.getSensorValuePreconditionAccess().getGroup(), "rule__SensorValuePrecondition__Group__0");
					put(grammarAccess.getTimerAccess().getGroup(), "rule__Timer__Group__0");
					put(grammarAccess.getAlarmAccess().getGroup(), "rule__Alarm__Group__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getHardwareAssignment_3(), "rule__Model__HardwareAssignment_3");
					put(grammarAccess.getModelAccess().getDevicesAssignment_4(), "rule__Model__DevicesAssignment_4");
					put(grammarAccess.getModelAccess().getEventHandlersAssignment_5(), "rule__Model__EventHandlersAssignment_5");
					put(grammarAccess.getModelAccess().getSensorListenersAssignment_6(), "rule__Model__SensorListenersAssignment_6");
					put(grammarAccess.getModelAccess().getTimersAssignment_7(), "rule__Model__TimersAssignment_7");
					put(grammarAccess.getModelAccess().getAlarmsAssignment_8(), "rule__Model__AlarmsAssignment_8");
					put(grammarAccess.getModelAccess().getPriorityAssignment_9_1(), "rule__Model__PriorityAssignment_9_1");
					put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
					put(grammarAccess.getSensorAccess().getPinAssignment_3(), "rule__Sensor__PinAssignment_3");
					put(grammarAccess.getActuatorAccess().getNameAssignment_1(), "rule__Actuator__NameAssignment_1");
					put(grammarAccess.getActuatorAccess().getPinAssignment_3(), "rule__Actuator__PinAssignment_3");
					put(grammarAccess.getEventHandlerAccess().getNameAssignment_1(), "rule__EventHandler__NameAssignment_1");
					put(grammarAccess.getEventHandlerAccess().getChangeActuatorsAssignment_2(), "rule__EventHandler__ChangeActuatorsAssignment_2");
					put(grammarAccess.getChangeActuatorAccess().getActuatorAssignment_0(), "rule__ChangeActuator__ActuatorAssignment_0");
					put(grammarAccess.getChangeActuatorAccess().getActuatorStateAssignment_2(), "rule__ChangeActuator__ActuatorStateAssignment_2");
					put(grammarAccess.getSensorListenerAccess().getSensorAssignment_1(), "rule__SensorListener__SensorAssignment_1");
					put(grammarAccess.getSensorListenerAccess().getTypeAssignment_3_0(), "rule__SensorListener__TypeAssignment_3_0");
					put(grammarAccess.getSensorListenerAccess().getLAssignment_3_1(), "rule__SensorListener__LAssignment_3_1");
					put(grammarAccess.getSensorListenerAccess().getHAssignment_3_3(), "rule__SensorListener__HAssignment_3_3");
					put(grammarAccess.getSensorListenerAccess().getEventHandlerAssignment_5(), "rule__SensorListener__EventHandlerAssignment_5");
					put(grammarAccess.getPreconditionAccess().getPre1Assignment_0_0(), "rule__Precondition__Pre1Assignment_0_0");
					put(grammarAccess.getPreconditionAccess().getOpAssignment_0_1(), "rule__Precondition__OpAssignment_0_1");
					put(grammarAccess.getPreconditionAccess().getPreAssignment_0_2(), "rule__Precondition__PreAssignment_0_2");
					put(grammarAccess.getPreconditionAccess().getPre1Assignment_1(), "rule__Precondition__Pre1Assignment_1");
					put(grammarAccess.getPrecondition1Access().getPreAssignment_0(), "rule__Precondition1__PreAssignment_0");
					put(grammarAccess.getPrecondition1Access().getPreAssignment_1(), "rule__Precondition1__PreAssignment_1");
					put(grammarAccess.getEmptyPreconditionAccess().getNameAssignment(), "rule__EmptyPrecondition__NameAssignment");
					put(grammarAccess.getSensorValuePreconditionAccess().getSensorAssignment_0(), "rule__SensorValuePrecondition__SensorAssignment_0");
					put(grammarAccess.getSensorValuePreconditionAccess().getCondAssignment_1(), "rule__SensorValuePrecondition__CondAssignment_1");
					put(grammarAccess.getSensorValuePreconditionAccess().getValueAssignment_2(), "rule__SensorValuePrecondition__ValueAssignment_2");
					put(grammarAccess.getTimerAccess().getEventHandlerAssignment_1(), "rule__Timer__EventHandlerAssignment_1");
					put(grammarAccess.getTimerAccess().getRepeattypeAssignment_3(), "rule__Timer__RepeattypeAssignment_3");
					put(grammarAccess.getTimerAccess().getTimerSecsAssignment_5(), "rule__Timer__TimerSecsAssignment_5");
					put(grammarAccess.getAlarmAccess().getEventHandlerAssignment_1(), "rule__Alarm__EventHandlerAssignment_1");
					put(grammarAccess.getAlarmAccess().getRepeattypeAssignment_3(), "rule__Alarm__RepeattypeAssignment_3");
					put(grammarAccess.getAlarmAccess().getTimerHoursAssignment_5(), "rule__Alarm__TimerHoursAssignment_5");
					put(grammarAccess.getAlarmAccess().getTimerMinutesAssignment_7(), "rule__Alarm__TimerMinutesAssignment_7");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			es.usj.raspduino.ui.contentassist.antlr.internal.InternalRaspduinoDSLParser typedParser = (es.usj.raspduino.ui.contentassist.antlr.internal.InternalRaspduinoDSLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RaspduinoDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RaspduinoDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
