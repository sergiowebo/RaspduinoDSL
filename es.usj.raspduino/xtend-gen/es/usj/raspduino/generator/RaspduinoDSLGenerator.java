/**
 * generated by Xtext
 */
package es.usj.raspduino.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import es.usj.raspduino.generator.Util;
import es.usj.raspduino.generator.arduino.MainArduino;
import es.usj.raspduino.raspduinoDSL.Model;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class RaspduinoDSLGenerator implements IGenerator {
  @Inject
  private Util util;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Model> _filter = Iterables.<Model>filter(_iterable, Model.class);
    for (final Model e : _filter) {
      {
        this.util.setFsa(fsa);
        String _hardware = e.getHardware();
        boolean _equals = _hardware.equals("Arduino UNO");
        if (_equals) {
          MainArduino _mainArduino = new MainArduino();
          _mainArduino.generateMainCode(e, this.util);
        } else {
          String _hardware_1 = e.getHardware();
          boolean _equals_1 = _hardware_1.equals("Raspberry Pi");
          if (_equals_1) {
          }
        }
      }
    }
  }
}
